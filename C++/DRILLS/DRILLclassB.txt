Problem #1:         
-------------------------------
[Points = 5]


// --------------------------------------------------------------------
// Complete the body of the BIG member function.
//
// WARNING:   DO NOT PROMPT FOR INPUT or LABEL OUTPUT.
// --------------------------------------------------------------------
#include <iostream>
using namespace std;
static int t=0;
class LIST
{
 public:
   LIST(){x=0;y=0;z=0;};
   int BIG();
   void Read_x(){int v; cin >> v; t++; x = t* v;}
   void Read_y(){int v; cin >> v; t++; y = t* v;}
   void Read_z(){int v; cin >> v; t++; z = t* v;}
 private:
   int x,y,z;
};

// Return the largest of x, y and z.
int LIST :: BIG()
{
 if(x>y && x>z)
   return x;
 else if (y>x && y>z)
   return y;
 else
   return z;
}

int main()
{
   LIST myList; // DO NOT DELETE.

   myList.Read_x();     // DO NOT DELETE.
   myList.Read_y();     // DO NOT DELETE.
   myList.Read_z();     // DO NOT DELETE.

   cout << t * myList.BIG(); // DO NOT DELETE.
   cout << endl; return 0;   // DO NOT DELETE.
}


Problem #2:        
-------------------------------
[Points = 12]


// Consider the class declaration below.
//
// Complete the main program to:
//   1. Create one CONTAINER object C;
//   2. Read count, the number of input values.
//   3. Read count values from keyboard, storing values in array.
//      (NOTE: Do not overflow the array 10-element container.)
//   4. Display the contents of the container, in increasing order..
//
// NOTE: All values in the container are between 1 and 10.
//
// Example: Inputs 6 3 7 5 8 7 9   ==> outputs 3 5 7 7 8 9
//          Inputs 5 3 5 7 7 5     ==> outputs 3 5 5 7 7
//          Inputs 10 2 2 2 2 2 1 1 1 1 1  ==> outputs 1 1 1 1 1 2 2 2 2 2
//          Inputs 4 3 5 7 8 9     ==> outputs 3 5 7 8
//          inputs 15 2 4 6 8 1 3 5 7 9 3 6 9 4 8 5 ==> output 1 2 3 3 4 5 6 7 8 9
// -------------------------------------------------------------------
#include <iostream>
using namespace std;
class CONTAINER
{
   public:
       CONTAINER();  // Initialize to empty container.
       int Size();   // Return the #values in container.
       int Count(int v);  // Return number of times value v occurs in array.
       void AddLast(int value); // Add as last element in array.
   private:
       int size;
       int A[10];
};

int main()
{


   cout << endl; return 0; // DO NOT MOVE or DELETE.
}//main

                        // DO NOT MOVE OR DELETE.
#include "class73240.cpp"
 Problem #3:        
-------------------------------
[Points = 12]

// Consider the class declaration below.
//
// Complete the main program that (1) creates one CONTAINER object, then
// (2) displays the maximum value stored in the CONTAINER.
//
// NOTE: All values in the container are between 1 and 10.
//
// If the container holds 5 values, 8 4 9 7 2  ==> output is 9
// -------------------------------------------------------------------
#include <iostream>
using namespace std;
class CONTAINER
{
   public:
       CONTAINER(); // Load values into the container.
       int Size(); // Return the #values in container.
       void Remove(int value); // Remove value from container, if there.
   private:
       int size;
       int A[10];
};

int main()
{
CONTAINER c;
c.CONTAINER();





   cout << endl; return 0; // DO NOT MOVE or DELETE.
}//main
                        // DO NOT MOVE OR DELETE.
#include "class73000.cpp"
Problem #4:         
-------------------------------
[Points = 3]


// --------------------------------------------------------------------
// Run the program and provide inputs to cause the ouput to be:
//
//        168
//    ans: 24
// --------------------------------------------------------------------
#include <iostream>
using namespace std;
class RECT
{
 private:
   int x; int y;
 public:
   RECT(int p){x=p;y=7;}
   int A(){return x * y;}
};

int main()
{
   int a;
   cin >> a;
   RECT r(a);
   cout << r.A();
   cout << endl; return 0; // DO NOT DELETE.
}


Problem #5:        
-------------------------------
[Points = 4]


// --------------------------------------------------------------------
// Complete the program to create a rectangle of dimension 17x4 (x by y).
//
// WARNING:   DO NOT PROMPT FOR INPUT or LABEL OUTPUT.
// --------------------------------------------------------------------
#include <iostream>
using namespace std;
class R
{
 public:
   int x;
   R(){x=0;y=0;}
   int A(){return x * y;}
   void Set_y(int v){y = v;}
 private:
   int y;
};

int main()
{
  

  int z;     // DO NOT MOVE or DELETE.
  cin >> z;  // DO NOT MOVE or DELETE.
  R r;
  r.x=17;
  r.Set_y(4);
  r.A();
  

   cout << z * r.A();      // DO NOT MOVE or DELETE.
   cout << endl; return 0; // DO NOT MOVE or DELETE.
}
Problem #6:         [TIME LEFT = 07:55:33 ]
-------------------------------
[Points = 5]


// --------------------------------------------------------------------
// Complete the program to declare two rectangles, the first one 25 by 15,
// the second 20 x 30, then print the area of the first rectangle followed
// by the area of the second.
//
// WARNING:   DO NOT PROMPT FOR INPUT or LABEL OUTPUT.
// --------------------------------------------------------------------
#include <iostream>
static int c=0;
using namespace std;
class RECT
{
 private:
   int x; int y;
 public:
   RECT(int a, int b){x=a;y=b;cout << ++c << " ";}
   int A(){cout << ++c << " "; return x * y;}
};

int main()
{
  RECT R1,R2;
  R1.RECT(25,15);
  R2.RECT(20,30);
  R1.A();
  R2.A();
   cout << endl; return 0; // DO NOT DELETE.
}








