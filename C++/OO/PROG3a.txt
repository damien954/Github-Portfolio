// ------------------------------------------------------------------
// File name:   Array.cpp 
// Assign ID:   PROG3_Array -- PROG31 -- Array (All one program, NO FUNCTIONS)
// Due Date:    02/04/15 at 11 
//
// Purpose:     Give student experience performing basic array operations
//              implemented as functions..
//
// Author:      dcunningham Damien Cunningham
//
// ------------------------------------------------------------------

#include <iostream>
#include <math.h>
#include <fstream>
#include <iomanip>

using namespace std;

int main()
{

   
   //-| ----------------------------------------------------------------------
   //-| Print the copyright notice declaring authorship.
   //-| ----------------------------------------------------------------------
   cout << endl << "(c) 2015, dcunningham Damien Cunningham" << endl << endl; 
   
   int N,max=0,min=0,sum=0,minpos=0;
   ofstream outF,outFile;
   string Filename;
  

   //-| ------------------------------------------------------------------
   //-| 1. Load N values from the keyboard into the array named First. 
   //-|
   //-|    NOTE: N must be >= 0.
   //-|
   //-|    Prompt before starting: 
   //-|     "Enter N, the #values (must be >= 0): "
   //-|    Prompt for each value: 
   //-|     "Enter next value: "
   //-|
   //-|    Function prototype: void Load(int A[], int & Asize);
   //-| ------------------------------------------------------------------
   
   cout<<"Enter N, the #values (must be >= 0): ";
   cin>>N;

   
   int First[N];
   for(int i=0; i<N; i++)
   {
   cout<<"Enter next value: ";
   cin >>First[i];
   }

   //-| ------------------------------------------------------------------  
   //-| 2. Display the N values in array First, ALL ON ONE LINE.
   //-|
   //-|             Output format: xx VALUES in First: xx xx xx xx ... xx
   //-|
   //-|           Function prototype: 
   //-|               void Display(string OutputLabel, int B[], int Bsize);
   //-| ------------------------------------------------------------------
   
   cout<<N<<" VALUES in First: ";
   for(int k=0; k<N; k++)
   {
   	cout<<First[k]<<" ";
   }
   cout<<endl;
   
   //-| ------------------------------------------------------------------  
   //-| 3. Display the N values in array First, IN REVERSE ORDER, 
   //-|    all on one line.
   //-|
   //-|    Output format: REVERSED First VALUES: xx xx xx xx ... xx
   //-|
   //-|    Function prototype: 
   //-|    void DisplayReverse(string OutputLabel, int C[], int Csize);
   //-| ------------------------------------------------------------------
   cout<<"REVERSED First VALUES: ";
   for(int j=N-1; j>=0; j--)
   {
   	cout<<First[j]<<" ";
   }
   cout<<endl;
   //-| ------------------------------------------------------------------  
   //-| 4. Determine the largest value in array First, and print it.
   //-|
   //-|    Output format: ARRAY First MAX = xxx
   //-|
   //-|    Function prototype: int MaxValue (int [], int );
   //-| ------------------------------------------------------------------
   max=First[0];
   for(int maxI=1; maxI<N; maxI++)
   {
   	if (max<First[maxI])
   	{
   		max=First[maxI];
   	}
   	
   }
   cout<<"ARRAY First MAX = "<<max;
   cout<<endl;

   
   //-| ------------------------------------------------------------------  
   //-|  5. Determine the smallest value in array First, and print it.
   //-|
   //-|             Output format: First MINIMUM = xxx
   //-|
   //-|
   //-|           Function prototype: void Smallest(int [], int, int & minvalue );
   //-| ------------------------------------------------------------------
   min=First[0];
   for(int minI=1; minI<N; minI++)
   {
   	if (min>First[minI])
   	{
   		min=First[minI];
   	}
   }
   cout<<"First MINIMUM = "<<min;
   cout<<endl;
   //-| ------------------------------------------------------------------  
   //-|  6. Calculate the sum of the values in array First, and print it.
   //-|
   //-|     Output format: SUM OF First VALUES = xxx
   //-|
   //-|
   //-|     Function prototype: int ArraySum(int [], int );
   //-| ------------------------------------------------------------------
   for(int sumI=0; sumI<N; sumI++)
   {
   	sum+=First[sumI];
   }
   cout<<"SUM OF First VALUES = "<<sum;
   cout<<endl;
   
   //-| ------------------------------------------------------------------  
   //-| 7. Determine the POSITION of the smallest value in array First, 
   //-|    and print it.
   //-|
   //-|    Output format: SMALLEST VALUE in First AT [xx]
   //-|
   //-|    Function prototype: int ArraySum(int [], int );
   //-| ------------------------------------------------------------------
   min=First[0];
   for(int minK=1; minK<N; minK++)
   {
   	if (min>First[minK])
   	{
   		min=First[minK];
   		minpos=minK;
   	}
   }
   cout<<"SMALLEST VALUE in First AT ["<<minpos<<"]";
   cout<<endl;
   //-| ------------------------------------------------------------------  
   //-| 8. For each element in First, store the square of the value
   //-|    into the corresponding element in array Second.
   //-|
   //-|    Function prototype: 
   //-|     void MakeSquare(int Size, int A[], int B[]);
   //-| ------------------------------------------------------------------
   int Second[N];
   for(int sqr=0; sqr<N; sqr++)
   {
   	Second[sqr]=First[sqr]*First[sqr];
   }
   //-| ------------------------------------------------------------------  
   //-| 9. Write the N values in array Second to file named 
   //-|           'arraySecond', ALL ON ONE LINE (values separated by one space).
   //-|
   //-|             Output format: xx xx xx xx ... xx
   //-|
   //-|
   //-|            Function prototype: void SaveToFile(int Xsize, int X[]);
   //-| ------------------------------------------------------------------
   outF.open("arraySecond");
   for(int x=0; x<N; x++)
   {
   	outF<<Second[x]<<" ";
   }
   cout<<endl;
   //-| ------------------------------------------------------------------  
   //-| 10. For each element in First and Second, store the sum of the
   //-|             elements into array Third.
   //-|
   //-|              Note: First[i] + Second[i] ==> Third[i]
   //-|
   //-|           Function prototype: 
   //-|               void SumArray(int Size, int A[], int B[], int C[]);
   //-| ------------------------------------------------------------------
   int Third[N];
   for(int addK=0; addK<N;addK++)
   {
   	Third[addK]=First[addK] + Second[addK];
   }
   //-| ------------------------------------------------------------------  
   //-| 11. Read the name of an output file. Open the file. Then write values
   //-|          in array Third to this ouput file, ONE VALUE PER LINE, using
   //-|          an output field of width 5.
   //-|
   //-|             Output format: xxxxx 
   //-|                            xxxxx
   //-|                            ...
   //-|                            xxxxx
   //-|      
   //-|
   //-|           Function prototype: 
   //-|                void SaveArray(ostream & outF, int Zsize, int Z[]);
   //-| ------------------------------------------------------------------
   cin>>Filename;
   outFile.open(Filename.c_str());
   for(int out=0; out<N; out++)
   {
   	outFile<<setw(5)<<Third[out]<<endl;
   	cout<<setw(5)<<Third[out]<<endl;
   }
   
   
   outF.close();
   outFile.close();
   
   //-| ----------------------------------------------------------------------
   //-| Print the copyright notice declaring authorship again.
   //-| ----------------------------------------------------------------------
   cout << endl << "(c) 2015, dcunningham Damien Cunningham" << endl << endl; 


   return 0;

}//main
